{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"mutating","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"areInIncreasingOrder"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"text":"A predicate that returns ","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"text":"first argument should be ordered before its second argument;","type":"text"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":". If "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" throws an error during","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the sort, the elements may be in a different order, but none will be"},{"type":"text","text":" "},{"type":"text","text":"lost."}]}]}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you want to sort a collection of elements that donâ€™t conform to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"Comparable","type":"codeVoice"},{"text":" protocol, pass a closure to this method that returns","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the first element should be ordered before the second."}]},{"inlineContent":[{"text":"In the following example, the closure provides an ordering for an array","type":"text"},{"text":" ","type":"text"},{"text":"of a custom enumeration that describes an HTTP response. The predicate","type":"text"},{"text":" ","type":"text"},{"text":"orders errors before successes and sorts the error responses by their","type":"text"},{"type":"text","text":" "},{"text":"error code.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","var responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","responses.sort {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(responses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, use this method to sort a collection of elements that do"},{"type":"text","text":" "},{"type":"text","text":"conform to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" when you want the sort to be descending instead"},{"type":"text","text":" "},{"type":"text","text":"of ascending. Pass the greater-than operator ("},{"type":"codeVoice","code":">"},{"type":"text","text":") operator as the"},{"text":" ","type":"text"},{"type":"text","text":"predicate."}]},{"code":["var students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","students.sort(by: >)","print(students)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder"},{"text":" must be a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"strict weak ordering","type":"text"}]},{"text":" over the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"elements. That is, for any elements "},{"code":"a","type":"codeVoice"},{"text":", ","type":"text"},{"code":"b","type":"codeVoice"},{"type":"text","text":", and "},{"code":"c","type":"codeVoice"},{"type":"text","text":", the following"},{"type":"text","text":" "},{"text":"conditions must hold:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"areInIncreasingOrder(a, a)","type":"codeVoice"},{"type":"text","text":" is always "},{"code":"false","type":"codeVoice"},{"type":"text","text":". (Irreflexivity)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"code":"areInIncreasingOrder(a, b)","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"text":" are","type":"text"},{"type":"text","text":" "},{"text":"both ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", then ","type":"text"},{"code":"areInIncreasingOrder(a, c)","type":"codeVoice"},{"type":"text","text":" is also "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"(Transitive comparability)","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Two elements are ","type":"text"},{"inlineContent":[{"type":"text","text":"incomparable"}],"type":"emphasis"},{"type":"text","text":" if neither is ordered before the other"},{"text":" ","type":"text"},{"type":"text","text":"according to the predicate. If "},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"code":"b","type":"codeVoice"},{"type":"text","text":" "},{"text":"and ","type":"text"},{"code":"c","type":"codeVoice"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"text":" and ","type":"text"},{"code":"c","type":"codeVoice"},{"text":" are also incomparable.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The sorting algorithm is guaranteed to be stable. A stable sort","type":"text"},{"type":"text","text":" "},{"text":"preserves the relative order of elements for which","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" does not establish an order."}]},{"type":"aside","name":"Complexity","style":"note","content":[{"inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":"), where ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":" is the length of the collection.","type":"text"}],"type":"paragraph"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/tomlkit\/tomlarray\/sort(by:)"]}],"kind":"symbol","identifier":{"url":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray\/sort(by:)","interfaceLanguage":"swift"},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"metadata":{"role":"symbol","modules":[{"relatedModules":["Swift"],"name":"TOMLKit"}],"extendedModule":"Swift","roleHeading":"Instance Method","title":"sort(by:)","externalID":"s:SMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF::SYNTHESIZED::s:7TOMLKit9TOMLArrayC","symbolKind":"method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]},"hierarchy":{"paths":[["doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit","doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray","doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray\/MutableCollection-Implementations"]]},"abstract":[{"text":"Sorts the collection in place, using the given predicate as the","type":"text"},{"type":"text","text":" "},{"text":"comparison between elements.","type":"text"}],"references":{"https://toml.io/en/v1.0.0#array":{"identifier":"https:\/\/toml.io\/en\/v1.0.0#array","title":"array","titleInlineContent":[{"type":"text","text":"array"}],"type":"link","url":"https:\/\/toml.io\/en\/v1.0.0#array"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLArray/sort(by:)":{"role":"symbol","identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray\/sort(by:)","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"RandomAccessCollection","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"kind":"symbol","type":"topic","title":"sort(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"sort","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"}],"abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"text":" ","type":"text"},{"type":"text","text":"comparison between elements."}],"url":"\/documentation\/tomlkit\/tomlarray\/sort(by:)"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLArray/MutableCollection-Implementations":{"url":"\/documentation\/tomlkit\/tomlarray\/mutablecollection-implementations","title":"MutableCollection Implementations","type":"topic","identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray\/MutableCollection-Implementations","abstract":[],"role":"collectionGroup","kind":"article"},"https://github.com/marzer/tomlplusplus/":{"type":"link","identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/","title":"toml++","titleInlineContent":[{"type":"text","text":"toml++"}],"url":"https:\/\/github.com\/marzer\/tomlplusplus\/"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLArray":{"title":"TOMLArray","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TOMLArray","kind":"identifier"}],"abstract":[{"type":"text","text":"An "},{"identifier":"https:\/\/toml.io\/en\/v1.0.0#array","isActive":true,"type":"reference"},{"type":"text","text":" in a TOML document."}],"type":"topic","navigatorTitle":[{"text":"TOMLArray","kind":"identifier"}],"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLArray","url":"\/documentation\/tomlkit\/tomlarray","kind":"symbol","role":"symbol"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit":{"abstract":[{"type":"text","text":"TOMLKit is a "},{"isActive":true,"identifier":"https:\/\/toml.io","type":"reference"},{"text":" parser and serializer powered by ","type":"text"},{"identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/","type":"reference","isActive":true},{"type":"text","text":"."}],"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit","url":"\/documentation\/tomlkit","title":"TOMLKit","type":"topic","kind":"symbol","role":"collection"},"https://toml.io":{"identifier":"https:\/\/toml.io","title":"TOML","titleInlineContent":[{"type":"text","text":"TOML"}],"type":"link","url":"https:\/\/toml.io"}}}