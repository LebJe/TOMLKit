{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":" "},{"kind":"internalParam","text":"areInIncreasingOrder"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"type":"text","text":"first argument should be ordered before its second argument;"},{"type":"text","text":" "},{"type":"text","text":"otherwise, "},{"type":"codeVoice","code":"false"},{"type":"text","text":". If "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" throws an error during"},{"type":"text","text":" "},{"type":"text","text":"the sort, the elements may be in a different order, but none will be"},{"type":"text","text":" "},{"type":"text","text":"lost."}]}]}]},{"kind":"content","content":[{"anchor":"discussion","level":2,"type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you want to sort a collection of elements that donâ€™t conform to"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" protocol, pass a closure to this method that returns"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":" when the first element should be ordered before the second."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the following example, the closure provides an ordering for an array"},{"type":"text","text":" "},{"type":"text","text":"of a custom enumeration that describes an HTTP response. The predicate"},{"type":"text","text":" "},{"type":"text","text":"orders errors before successes and sorts the error responses by their"},{"type":"text","text":" "},{"type":"text","text":"error code."}]},{"type":"codeListing","syntax":null,"code":["enum HTTPResponse {","    case ok","    case error(Int)","}","","var responses: [HTTPResponse] = [.error(500), .ok, .ok, .error(404), .error(403)]","responses.sort {","    switch ($0, $1) {","    \/\/ Order errors by code","    case let (.error(aCode), .error(bCode)):","        return aCode < bCode","","    \/\/ All successes are equivalent, so none is before any other","    case (.ok, .ok): return false","","    \/\/ Order errors before successes","    case (.error, .ok): return true","    case (.ok, .error): return false","    }","}","print(responses)","\/\/ Prints \"[.error(403), .error(404), .error(500), .ok, .ok]\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, use this method to sort a collection of elements that do"},{"type":"text","text":" "},{"type":"text","text":"conform to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" when you want the sort to be descending instead"},{"type":"text","text":" "},{"type":"text","text":"of ascending. Pass the greater-than operator ("},{"type":"codeVoice","code":">"},{"type":"text","text":") operator as the"},{"type":"text","text":" "},{"type":"text","text":"predicate."}]},{"type":"codeListing","syntax":null,"code":["var students = [\"Kofi\", \"Abena\", \"Peter\", \"Kweku\", \"Akosua\"]","students.sort(by: >)","print(students)","\/\/ Prints \"[\"Peter\", \"Kweku\", \"Kofi\", \"Akosua\", \"Abena\"]\""]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" must be a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"strict weak ordering"}]},{"type":"text","text":" over the"},{"type":"text","text":" "},{"type":"text","text":"elements. That is, for any elements "},{"type":"codeVoice","code":"a"},{"type":"text","text":", "},{"type":"codeVoice","code":"b"},{"type":"text","text":", and "},{"type":"codeVoice","code":"c"},{"type":"text","text":", the following"},{"type":"text","text":" "},{"type":"text","text":"conditions must hold:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"type":"codeVoice","code":"false"},{"type":"text","text":". (Irreflexivity)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"areInIncreasingOrder(a, b)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"type":"text","text":" is also "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"(Transitive comparability)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Two elements are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"incomparable"}]},{"type":"text","text":" if neither is ordered before the other"},{"type":"text","text":" "},{"type":"text","text":"according to the predicate. If "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are also incomparable."},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The sorting algorithm is not guaranteed to be stable. A stable sort"},{"type":"text","text":" "},{"type":"text","text":"preserves the relative order of elements for which"},{"type":"text","text":" "},{"type":"codeVoice","code":"areInIncreasingOrder"},{"type":"text","text":" does not establish an order."}]},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" log "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the collection."}]}],"type":"aside","name":"Complexity"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/tomlkit\/tomlarray\/sort(by:)"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray\/sort(by:)","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"comparison between elements."}],"kind":"symbol","metadata":{"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"sort(by:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"symbolKind":"method","externalID":"s:SMsSkRzrlE4sort2byySb7ElementSTQz_ADtKXE_tKF::SYNTHESIZED::s:7TOMLKit9TOMLArrayC","extendedModule":"Swift","modules":[{"name":"TOMLKit"}]},"hierarchy":{"paths":[["doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit","doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray","doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray\/MutableCollection-Implementations"]]},"references":{"doc://com.LebJe.TOMKit/documentation/TOMLKit/TOMLArray/sort(by:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Self"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"RandomAccessCollection"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"role":"symbol","title":"sort(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"sort"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}],"abstract":[{"type":"text","text":"Sorts the collection in place, using the given predicate as the"},{"type":"text","text":" "},{"type":"text","text":"comparison between elements."}],"identifier":"doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray\/sort(by:)","kind":"symbol","type":"topic","url":"\/documentation\/tomlkit\/tomlarray\/sort(by:)"},"doc://com.LebJe.TOMKit/documentation/TOMLKit/TOMLArray/MutableCollection-Implementations":{"role":"collectionGroup","title":"MutableCollection Implementations","abstract":[],"identifier":"doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray\/MutableCollection-Implementations","kind":"article","type":"topic","url":"\/documentation\/tomlkit\/tomlarray\/mutablecollection-implementations"},"https://github.com/marzer/tomlplusplus/":{"title":"toml++","titleInlineContent":[{"type":"text","text":"toml++"}],"type":"link","identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/","url":"https:\/\/github.com\/marzer\/tomlplusplus\/"},"https://toml.io/en/v1.0.0#array":{"title":"array","titleInlineContent":[{"type":"text","text":"array"}],"type":"link","identifier":"https:\/\/toml.io\/en\/v1.0.0#array","url":"https:\/\/toml.io\/en\/v1.0.0#array"},"https://toml.io":{"title":"TOML","titleInlineContent":[{"type":"text","text":"TOML"}],"type":"link","identifier":"https:\/\/toml.io","url":"https:\/\/toml.io"},"doc://com.LebJe.TOMKit/documentation/TOMLKit/TOMLArray":{"role":"symbol","title":"TOMLArray","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"TOMLArray"}],"abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"https:\/\/toml.io\/en\/v1.0.0#array"},{"type":"text","text":" in a TOML document."}],"identifier":"doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit\/TOMLArray","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TOMLArray"}],"url":"\/documentation\/tomlkit\/tomlarray"},"doc://com.LebJe.TOMKit/documentation/TOMLKit":{"role":"collection","title":"TOMLKit","abstract":[{"type":"text","text":"TOMLKit is a "},{"type":"reference","isActive":true,"identifier":"https:\/\/toml.io"},{"type":"text","text":" parser and serializer powered by "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.LebJe.TOMKit\/documentation\/TOMLKit","kind":"symbol","type":"topic","url":"\/documentation\/tomlkit"}}}