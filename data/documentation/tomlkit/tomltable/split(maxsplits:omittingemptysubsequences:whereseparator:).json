{"hierarchy":{"paths":[["doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit","doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable","doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable\/Sequence-Implementations"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/tomlkit\/tomltable\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","identifier":{"url":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"whereSeparator"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":">]","kind":"text"}]}]},{"parameters":[{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or one"},{"type":"text","text":" "},{"type":"text","text":"less than the number of subsequences to return. If "},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"subsequences are returned, the last one is a suffix of the original"},{"text":" ","type":"text"},{"type":"text","text":"sequence containing the remaining elements. "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be"},{"type":"text","text":" "},{"type":"text","text":"greater than or equal to zero. The default value is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", an empty subsequence is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"code":"isSeparator","type":"codeVoice"},{"text":" predicate and for each element at the","type":"text"},{"type":"text","text":" "},{"text":"start or end of the sequence satisfying the ","type":"text"},{"code":"isSeparator","type":"codeVoice"},{"type":"text","text":" predicate."},{"type":"text","text":" "},{"type":"text","text":"If "},{"type":"codeVoice","code":"true"},{"text":", only nonempty subsequences are returned. The default","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value is "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its argument should be"},{"text":" ","type":"text"},{"type":"text","text":"used to split the sequence; otherwise, "},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"isSeparator"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An array of subsequences, split from this sequence’s elements.","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a string using a"},{"type":"text","text":" "},{"type":"text","text":"closure that matches spaces. The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each word"},{"text":" ","type":"text"},{"text":"that was originally separated by one or more spaces.","type":"text"}],"type":"paragraph"},{"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","print(line.split(whereSeparator: { $0 == \" \" })","          .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""],"type":"codeListing","syntax":null},{"inlineContent":[{"type":"text","text":"The second example passes "},{"type":"codeVoice","code":"1"},{"type":"text","text":" for the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" parameter, so the"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["print(","   line.split(maxSplits: 1, whereSeparator: { $0 == \" \" })","                  .map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"  I don\\'t want realism. I want magic!\"]\""],"syntax":null},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" for the ","type":"text"},{"code":"allowEmptySlices","type":"codeVoice"},{"type":"text","text":" parameter, so"},{"text":" ","type":"text"},{"text":"the returned array contains empty strings where spaces were repeated.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["print(","    line.split(","        omittingEmptySubsequences: false,","        whereSeparator: { $0 == \" \" }","    ).map(String.init))","\/\/ Prints \"[\"BLANCHE:\", \"\", \"\", \"I\", \"don\\'t\", \"want\", \"realism.\", \"I\", \"want\", \"magic!\"]\""]},{"style":"note","type":"aside","name":"Complexity","content":[{"inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}]}]}],"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"kind":"text","text":"("},{"text":"maxSplits","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"text":"whereSeparator","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> ["},{"preciseIdentifier":"s:s10ArraySliceV","kind":"typeIdentifier","text":"ArraySlice"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa","text":"Element"},{"kind":"text","text":">]"}],"roleHeading":"Instance Method","role":"symbol","externalID":"s:STsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorSays10ArraySliceVy7ElementQzGGSi_S2bAHKXEtKF::SYNTHESIZED::s:7TOMLKit9TOMLTableC","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","extendedModule":"Swift","symbolKind":"method","modules":[{"relatedModules":["Swift"],"name":"TOMLKit"}]},"abstract":[{"type":"text","text":"Returns the longest possible subsequences of the sequence, in order, that"},{"text":" ","type":"text"},{"type":"text","text":"don’t contain elements satisfying the given predicate. Elements that are"},{"text":" ","type":"text"},{"type":"text","text":"used to split the sequence are not returned as part of any subsequence."}],"references":{"https://toml.io":{"titleInlineContent":[{"type":"text","text":"TOML"}],"title":"TOML","identifier":"https:\/\/toml.io","url":"https:\/\/toml.io","type":"link"},"https://github.com/marzer/tomlplusplus/":{"type":"link","title":"toml++","identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/","url":"https:\/\/github.com\/marzer\/tomlplusplus\/","titleInlineContent":[{"type":"text","text":"toml++"}]},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLTable/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/tomlkit\/tomltable\/split(maxsplits:omittingemptysubsequences:whereseparator:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:ST7ElementQa"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> ["},{"text":"ArraySlice","kind":"typeIdentifier","preciseIdentifier":"s:s10ArraySliceV"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier","text":"Element"},{"text":">]","kind":"text"}],"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","abstract":[{"text":"Returns the longest possible subsequences of the sequence, in order, that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"don’t contain elements satisfying the given predicate. Elements that are"},{"type":"text","text":" "},{"text":"used to split the sequence are not returned as part of any subsequence.","type":"text"}],"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","type":"topic"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLTable":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TOMLTable","kind":"identifier"}],"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable","kind":"symbol","title":"TOMLTable","url":"\/documentation\/tomlkit\/tomltable","abstract":[{"type":"text","text":"A "},{"type":"reference","isActive":true,"identifier":"https:\/\/toml.io\/en\/v1.0.0#table"},{"text":" in a TOML document.","type":"text"}],"navigatorTitle":[{"text":"TOMLTable","kind":"identifier"}],"role":"symbol","type":"topic"},"https://toml.io/en/v1.0.0#table":{"titleInlineContent":[{"text":"table","type":"text"}],"title":"table","identifier":"https:\/\/toml.io\/en\/v1.0.0#table","url":"https:\/\/toml.io\/en\/v1.0.0#table","type":"link"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit":{"kind":"symbol","title":"TOMLKit","role":"collection","url":"\/documentation\/tomlkit","type":"topic","abstract":[{"type":"text","text":"TOMLKit is a "},{"isActive":true,"type":"reference","identifier":"https:\/\/toml.io"},{"type":"text","text":" parser and serializer powered by "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/marzer\/tomlplusplus\/"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit"},"doc://com.LebJe.TOMLKit/documentation/TOMLKit/TOMLTable/Sequence-Implementations":{"identifier":"doc:\/\/com.LebJe.TOMLKit\/documentation\/TOMLKit\/TOMLTable\/Sequence-Implementations","kind":"article","url":"\/documentation\/tomlkit\/tomltable\/sequence-implementations","title":"Sequence Implementations","abstract":[],"role":"collectionGroup","type":"topic"}}}